/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple-lang

*/

/* 
 * #filename - System.sim
 * #author - Azeez Adewale
 * #date - 9 Febuary 2017
 */
 
module simple.system

call "loadsystemdll.sim" ? simple.system
		
#windows
WINDOWS_SYSTEM = "windows"
MS_DOS_SYSTEM = "windows_dos"
WINDOWS_I386_SYSTEM = "windows_i386"
WINDOWS_AMD64_SYSTEM = "windows_amd64"
WINDOWS_ARM_SYSTEM = "windows_arm"
WINDOWS_ARM64_SYSTEM = "windows_arm64"
WINDOWS_MIPS_SYSTEM = "windows_mips"
WINDOWS_POWERPC_SYSTEM = "windows_powerpc"
WINDOWS_POWERPC64_SYSTEM = "windows_powerpc64"

#linux
LINUX_SYSTEM = "linux"
LINUX_I386_SYSTEM = "linux_i386"
LINUX_AMD64_SYSTEM = "linux_amd64"
LINUX_ARM_SYSTEM = "linux_arm"
LINUX_ARM64_SYSTEM = "linux_arm64"
LINUX_MIPS_SYSTEM = "linux_mips"
LINUX_POWERPC_SYSTEM = "linux_powerpc"
LINUX_POWERPC64_SYSTEM = "linux_powerpc64"

#unix
UNIX_SYSTEM = "unix"
UNIX_I386_SYSTEM = "unix_i386"
UNIX_AMD64_SYSTEM = "unix_amd64"

#mac
MACOSX_SYSTEM = "macosx_i386"
MACOSX_AMD64_SYSTEM = "macosx_amd64"

#bsd
FREEBSD_SYSTEM = "freebsd_i386"
FREEBSD_AMD64_SYSTEM = "freebsd_amd64"
OPENBSD_SYSTEM = "openbsd_i386"
OPENBSD_AMD64_SYSTEM = "openbsd_amd64"
NETBSD_SYSTEM = "netbsd_i386"
NETBSD_AMD64_SYSTEM = "netbsd_amd64"

#aix
AIX_SYSTEM = "aix_i386"
AIX_AMD64_SYSTEM = "aix_amd64"

#solaris
SOLARIS_SYSTEM = "solaris_sparc"
SOLARIS_SPARC64_SYSTEM = "solaris_sparc64"

#haiku
HAIKU_SYSTEM = "haiku_i386"
HAIKU_AMD64_SYSTEM = "haiku_amd64"

#android
ANDROID_SYSTEM = "android"

#unknows
UNKNOWN_SYSTEM = "unknown_system"

block getEnv(variable)
	environmentVar = getSystemEnvironment(variable)
	if environmentVar == "(null)" {
		environmentVar = ""
	}
	return environmentVar

block getOS()
	if isMsDos() {
		return MS_DOS_SYSTEM
	elif isWindows()
		if isWindows64() {
			return WINDOWS_AMD64_SYSTEM
		elif isAmd64System()
			return WINDOWS_AMD64_SYSTEM
		elif isI386System()
			return WINDOWS_I386_SYSTEM
		elif isArm64System()
			return WINDOWS_ARM64_SYSTEM
		elif isArmSystem()
			return WINDOWS_ARM_SYSTEM
		elif isPowerPC64System()
			return WINDOWS_POWERPC64_SYSTEM
		elif isPowerPCSystem()
			return WINDOWS_POWERPC_SYSTEM
		elif isMIPSSystem()
			return WINDOWS_MIPS_SYSTEM
		else
			return WINDOWS_SYSTEM
		}
	elif isLinux()
		if isAmd64System()
			return LINUX_AMD64_SYSTEM
		elif isI386System()
			return LINUX_I386_SYSTEM
		elif isArm64System()
			return LINUX_ARM64_SYSTEM
		elif isArmSystem()
			return LINUX_ARM_SYSTEM
		elif isPowerPC64System()
			return LINUX_POWERPC64_SYSTEM
		elif isPowerPCSystem()
			return LINUX_POWERPC_SYSTEM
		elif isMIPSSystem()
			return LINUX_MIPS_SYSTEM
		else
			return LINUX_SYSTEM
		}
	else
		return UNKNOWN_SYSTEM
	}
	
#bbbbboobobobom true for now
block isAmd64System() return true
	
block getNewLine()
	if isWindows() || isWindows64()
		return windowsnl()
	else 
		return crlf
	end
	
	
block tickCount()

block exitCode()
	return 0
	
#internal block for getting environment variable
#block getSystemEnvironment(para) 
	
block commandLineParameters()
	return cmdparams
	
block commandLineParametersSize()
	return lengthOf(cmdparams)

block systemDirectory()
	return getSystemEnvironment("SYSTEM_DIR")
	
block systemVersion()
	return getSystemEnvironment("OSVERSION")
	
block systemUser()	
	return getSystemEnvironment("USERNAME")
	
block userDomain()	
	return getSystemEnvironment("USERDOMAIN")
	
block osGroup()
	return getSystemEnvironment("OS")
	
block machineName()
	return getSystemEnvironment("COMPUTERNAME")
	
block setSystemEnvironment(value)
	#incomming later
	
block isWindowNT()
	if stringEquals(osGroup(), "Windows_NT", true)
		return true
	end 
	return false
	
block userHome()	
	envValue = getSystemEnvironment("USERPROFILE")
	if envValue = "(null)" || envValue = "" {
		envValue = getSystemEnvironment("USERDIR")
		if envValue = "(null)" || envValue = "" {
			if isWindows() {
				envValue = "C:\Users\"+systemUser()
			else
				envValue = "~/"
			}
		}
	}
	return envValue

block tempDirectory()
	tempDirectory = getSystemEnvironment("TMPDIR")
	if tempDirectory == "(null)" || tempDirectory == "" {
		tempDirectory = getSystemEnvironment("TEMPDIR")
		if tempDirectory == "(null)" || tempDirectory == "" {
			tempDirectory = getSystemEnvironment("TMP")
			if tempDirectory == "(null)" || tempDirectory == "" {
				tempDirectory = getSystemEnvironment("TEMP")
				if tempDirectory == "(null)" || tempDirectory == "" {
					if isWindows() {
						tempDirectory = System.UserDirectory()+"\AppData\Local\Temp\"
					else
						tempDirectory = "/tmp/"
					}
					
				}
			}
		}
	}
	return tempDirectory
	
block getTempDirectory()
		return tempDirectory()
	
block exit(value)
	__exit(value)
	
block beep(time, rate)
	__beep(time, rate)
	
block sleep(length)
	__sleep(length)
	

	
/*
	GHOST BLOCKS
	-------------------------------
	currentDirectory() return the current working directory
	getSystemEnvironment(param) return a system env
	currentFileName() return the active simple source file name
	currentFilePath() return the active simple source file path
*/
	